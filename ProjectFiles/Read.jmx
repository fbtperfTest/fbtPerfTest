<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RECORD 03/14/18 9:00:11 AM" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.1.1.312. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Origin" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">http://mel-tlrbld-p29:5101</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="x-period-uid" elementType="Header">
            <stringProp name="Header.name">x-period-uid</stringProp>
            <stringProp name="Header.value">${year}</stringProp>
          </elementProp>
          <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
            <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
            <stringProp name="Header.value">(${client})</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="x-reporting-entity-uid" elementType="Header">
            <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
            <stringProp name="Header.value">${reportingEntityUID}</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en,en-GB;q=0.9,en-AU;q=0.8,en-US;q=0.7</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="x-client-uid" elementType="Header">
            <stringProp name="Header.name">x-client-uid</stringProp>
            <stringProp name="Header.value">${client}</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">mel-tlrbld-p29</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">ok</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbtYear" elementType="Argument">
            <stringProp name="Argument.name">fbtYear</stringProp>
            <stringProp name="Argument.value">2017</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="portnumber" elementType="Argument">
            <stringProp name="Argument.name">portnumber</stringProp>
            <stringProp name="Argument.value">5101</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">C:\FBT Project\FBT Performance Test\FBT-Performance-Test\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${path}\DataFile2.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">FirmId,userName,orgName,reportingEntity,workpaper,uploadTest,uploadFileName,EntityWorkpaper,create,uploadCount</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1363247040000</longProp>
        <longProp name="ThreadGroup.end_time">1363247040000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="true">
          <stringProp name="IncludeController.includepath">LoginOnly.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reportingEntities/select" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;parameters&quot;:{&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
          <stringProp name="HTTPSampler.port">82</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">FBTWebApi/admin/reportingEntities/select</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
            <collectionProp name="HeaderManager.headers"/>
          </HeaderManager>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">0</stringProp>
          </ConstantTimer>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get the Reporting Entity Uid" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">reportingEntityUID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.entities[?(@.displayValue==&apos;${reportingEntity}&apos;)].entityUid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${workpaper}&quot; != &quot;vehicle&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="defaults" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
	&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
	&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;,&#xd;
	&quot;parameters&quot;&#xd;
	:{&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
	&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
	&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;}&#xd;
	}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">FBTWebApi//benefits/${workpaper}/defaults</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mel-tlrbld-p29:5101/FBTWeb/benefits/adhoc/workpaper</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">10</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="930855410">defaultRecord</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="read" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">FBTWebApi//benefits/${workpaper}/read</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mel-tlrbld-p29:5101/FBTWeb/benefits/lafha/workpaper</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4774</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${workpaper}&quot; == &quot;vehicle&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="defaults" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
	&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
	&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;,&#xd;
	&quot;parameters&quot;&#xd;
	:{&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
	&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
	&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;}&#xd;
	}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/vehicle/details/defaults</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mel-tlrbld-p29:5101/FBTWeb/benefits/adhoc/workpaper</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">10</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="read" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/vehicle/details&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/vehicle/details/read</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mel-tlrbld-p29:5101/FBTWeb/benefits/lafha/workpaper</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4774</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read Vehicle" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageSize&quot;: 100,&#xd;
			&quot;pageNumber&quot;: 1&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;registrationNo&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}],&#xd;
		&quot;groupBy&quot;: null,&#xd;
		&quot;filters&quot;: {&#xd;
			&quot;_apiEndpoint&quot;: &quot;/benefits/vehicle/details&quot;&#xd;
		},&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Url}</stringProp>
            <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/vehicle/details/read</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Defaults for Workpaper" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
	&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
	&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	&#xd;
	&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;,&#xd;
	&quot;parameters&quot;:&#xd;
	  {&#xd;
	  		&quot;periodUID&quot;:&quot;${year}&quot;,&#xd;
			&quot;clientUID&quot;:&quot;${client}&quot;,&#xd;
			&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;,&#xd;
	  		&quot;apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;&#xd;
	  }&#xd;
}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Url}</stringProp>
            <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/vehicle/details/defaults</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="false">
          <stringProp name="IncludeController.includepath">C:\FBT Project\FBT Performance Test\FBT-Performance-Test\ProjectFiles\LoginOnly.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Lafha Selection" enabled="true">
          <stringProp name="IfController.condition">&quot;${workpaper}&quot; ==&quot;lafha&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${create}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer&#x9;http" elementType="Header">
                  <stringProp name="Header.name">Referer	http</stringProp>
                  <stringProp name="Header.value">//${BASE_URL_1}:${portnumber}/FBTWeb/dashboard/FBTWeb/dashboardOverview</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en,en-GB;q=0.8,en-AU;q=0.6,en-US;q=0.4</stringProp>
                </elementProp>
                <elementProp name="Origin&#x9;http" elementType="Header">
                  <stringProp name="Header.name">Origin	http</stringProp>
                  <stringProp name="Header.value">//${BASE_URL_1}:${portnumber}</stringProp>
                </elementProp>
                <elementProp name="x-reporting-entity-uid" elementType="Header">
                  <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                  <stringProp name="Header.value">${reportingEntityUID}</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-period-uid" elementType="Header">
                  <stringProp name="Header.name">x-period-uid</stringProp>
                  <stringProp name="Header.value">${year}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="x-client-uid" elementType="Header">
                  <stringProp name="Header.name">x-client-uid</stringProp>
                  <stringProp name="Header.value">${client}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employee Select" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;selectOptionCriteria&quot;: &quot;${employeeID}&quot;,&#xd;
		&quot;benefitClassName&quot;: &quot;&quot;,&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageNumber&quot;: 1,&#xd;
			&quot;pageSize&quot;: 10&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;lastName&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi/admin/employees/select</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">${year}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">${client}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">0</stringProp>
              </ConstantTimer>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">personUID</stringProp>
                <stringProp name="JSONPATH">$..entityUid</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">personUID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..entityUid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employee Validation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;personUID&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: null,&#xd;
		&quot;agreementDate&quot;: null,&#xd;
		&quot;alterationDate&quot;: null,&#xd;
		&quot;transitionalRules&quot;: null,&#xd;
		&quot;dateProvided&quot;: &quot;2017-04-01T00:00:00&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: 0,&#xd;
		&quot;daysLafhaPaid&quot;: 365,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: 0,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">2255</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://fbtapp-uat.onesourcetax.com:82/FBTWeb/signalr/ping?_=1522023423392" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_</stringProp>
                    <stringProp name="Argument.value">1522023423392</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWeb/signalr/ping</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Username" elementType="Header">
                    <stringProp name="Header.name">Username</stringProp>
                    <stringProp name="Header.value">admin a</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="TenantUID" elementType="Header">
                    <stringProp name="Header.name">TenantUID</stringProp>
                    <stringProp name="Header.value">0d891f2a-99aa-4e11-93dd-ef894b8a2954</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">10661</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Description Validation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;description&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: null,&#xd;
		&quot;alterationDate&quot;: null,&#xd;
		&quot;transitionalRules&quot;: null,&#xd;
		&quot;dateProvided&quot;: &quot;2017-04-01T00:00:00&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: 0,&#xd;
		&quot;daysLafhaPaid&quot;: 365,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: 0,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">3270</stringProp>
              </ConstantTimer>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">${__BeanShell(new java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;).format(new
Date()))}
vars.put(&quot;curTime&quot;,curTime);
print(curTime);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var currentdate = new Date();
var str=&quot;${description}&quot;;
var client=&quot;${FirmId}&quot;;
    var datetime =str +&quot; &quot;+client+&quot; Last Sync: &quot; + currentdate.getDate() + &quot;/&quot;+(currentdate.getMonth()+1) + &quot;/&quot; + currentdate.getFullYear()+ &quot; @ &quot;  + currentdate.getHours() + &quot;:&quot;  + currentdate.getMinutes() + &quot;:&quot; + currentdate.getSeconds()+ &quot;:&quot; + currentdate.getMilliseconds();

  vars.put(&quot;description&quot;,datetime);
 </stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agreement Date validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;agreementDate&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: null,&#xd;
		&quot;transitionalRules&quot;: null,&#xd;
		&quot;dateProvided&quot;: &quot;2017-04-01T00:00:00&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: 0,&#xd;
		&quot;daysLafhaPaid&quot;: 365,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: 0,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                <stringProp name="VAR">dateProvided</stringProp>
                <stringProp name="JSONPATH">$.fields.alterationDate.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                <stringProp name="VAR">dateProvided</stringProp>
                <stringProp name="JSONPATH">$.fields.dateProvided.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">7713</stringProp>
              </ConstantTimer>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">alterationDate</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.fields.alterationDate.value</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">transitionalRules</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.fields.transitionalRules.value</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Date Provided validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;dateProvided&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;${transitionalRules}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: 0,&#xd;
		&quot;daysLafhaPaid&quot;: 365,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: 0,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">dateProvided</stringProp>
                <stringProp name="JSONPATH">$.fields.dateProvided.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">dateProvided</stringProp>
                <stringProp name="JSONPATH">$.fields.dateProvided.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">7713</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Days Lafha Not Provided validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;daysNotProvided&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;, &quot;daysNotProvided&quot;,]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: 365,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: 0,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">daysLafhaPaid</stringProp>
                <stringProp name="JSONPATH">$.fields.daysLafhaPaid.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">5119</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Number of Adult validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;adultNumber&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;, &quot;daysNotProvided&quot;, &quot;adultNumber&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: &quot;${daysLafhaPaid}&quot;,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: &quot;${adultNumber}&quot;,&#xd;
		&quot;childrenNumber&quot;: 0,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: 0,&#xd;
		&quot;nonRecompenseAmt&quot;: 0,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">statutoryFoodAmtWeekly</stringProp>
                <stringProp name="JSONPATH">$.fields.statutoryFoodAmtWeekly.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">7328</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Nuber of Children validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;childrenNumber&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;, &quot;daysNotProvided&quot;, &quot;adultNumber&quot;, &quot;childrenNumber&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: &quot;${daysLafhaPaid}&quot;,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: &quot;${adultNumber}&quot;,&#xd;
		&quot;childrenNumber&quot;: &quot;${childrenNumber}&quot;,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: 0,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;nonRecompenseAmt&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">statutoryFoodAmtWeekly</stringProp>
                <stringProp name="JSONPATH">$.fields.statutoryFoodAmtWeekly.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">1908</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="totalAllowanceAmt validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;totalAllowanceAmt&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;, &quot;daysNotProvided&quot;, &quot;adultNumber&quot;, &quot;childrenNumber&quot;, &quot;totalAllowanceAmt&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: &quot;${daysLafhaPaid}&quot;,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: &quot;${adultNumber}&quot;,&#xd;
		&quot;childrenNumber&quot;: &quot;${childrenNumber}&quot;,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: &quot;${totalAllowanceAmt}&quot;,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: 0,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: 0,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;nonRecompenseAmt&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: 0,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3445</stringProp>
              </ConstantTimer>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">otherAllowanceComponent</stringProp>
                <stringProp name="JSONPATH">$.fields.otherAllowanceComponent.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Food Allowance validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
			&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;foodAllowanceAmt&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;, &quot;daysNotProvided&quot;, &quot;adultNumber&quot;, &quot;childrenNumber&quot;, &quot;totalAllowanceAmt&quot;, &quot;foodAllowanceAmt&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: &quot;${daysLafhaPaid}&quot;,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: &quot;${adultNumber}&quot;,&#xd;
		&quot;childrenNumber&quot;: &quot;${childrenNumber}&quot;,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: &quot;${totalAllowanceAmt}&quot;,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: &quot;${foodAllowanceAmt}&quot;,&#xd;
		&quot;overrideFoodComponent&quot;: 0,&#xd;
		&quot;otherAllowanceComponent&quot;: &quot;${otherAllowanceComponent}&quot;,&#xd;
		&quot;statutoryFoodAmt&quot;: 0,&#xd;
		&quot;atoFoodComponentWeekly&quot;: 0,&#xd;
		&quot;atoFoodComponent&quot;: 0,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: 0,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;nonRecompenseAmt&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: &quot;${otherAllowanceComponent}&quot;,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;bac0822a-ede8-4c95-8250-26d8a196b1d2&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">5466</stringProp>
              </ConstantTimer>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">otherAllowanceComponent</stringProp>
                <stringProp name="JSONPATH">$.fields.otherAllowanceComponent.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">overrideFoodComponent</stringProp>
                <stringProp name="JSONPATH">$.fields.overrideFoodComponent.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">statutoryFoodAmt</stringProp>
                <stringProp name="JSONPATH">$.fields.statutoryFoodAmt.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">atoFoodComponentWeekly</stringProp>
                <stringProp name="JSONPATH">$.fields.atoFoodComponentWeekly.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">atoFoodComponent</stringProp>
                <stringProp name="JSONPATH">$.fields.atoFoodComponent.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">foodTaxableValue</stringProp>
                <stringProp name="JSONPATH">$.fields.foodTaxableValue.value</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: null,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;agreementDate&quot;,&quot;dateProvided&quot;,&quot;daysNotProvided&quot;, &quot;adultNumber&quot;, &quot;childrenNumber&quot;, &quot;totalAllowanceAmt&quot;, &quot;foodAllowanceAmt&quot;]&#xd;
	},&#xd;
	&quot;records&quot;: [{&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;agreementDate&quot;: &quot;${agreementDate}&quot;,&#xd;
		&quot;alterationDate&quot;: &quot;${alterationDate}&quot;,&#xd;
		&quot;transitionalRules&quot;: &quot;New&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;daysProvided&quot;: 365,&#xd;
		&quot;daysNotProvided&quot;: &quot;${daysNotProvided}&quot;,&#xd;
		&quot;daysLafhaPaid&quot;: &quot;${daysLafhaPaid}&quot;,&#xd;
		&quot;fifodidoEmployee&quot;: false,&#xd;
		&quot;fifodidoDeclaration&quot;: false,&#xd;
		&quot;expensesDeclaration&quot;: true,&#xd;
		&quot;australianHomeDeclaration&quot;: true,&#xd;
		&quot;declarationProvided&quot;: false,&#xd;
		&quot;adultNumber&quot;: &quot;${adultNumber}&quot;,&#xd;
		&quot;childrenNumber&quot;: &quot;${childrenNumber}&quot;,&#xd;
		&quot;countryLafhaUID&quot;: &quot;76da6f26-a3e5-451f-a914-f7d41a7c2940&quot;,&#xd;
		&quot;totalAllowanceAmt&quot;: &quot;${totalAllowanceAmt}&quot;,&#xd;
		&quot;accommodationAmt&quot;: 0,&#xd;
		&quot;accommodationTaxableValue&quot;: 0,&#xd;
		&quot;foodAllowanceAmt&quot;: &quot;${foodAllowanceAmt}&quot;,&#xd;
		&quot;overrideFoodComponent&quot;: &quot;${overrideFoodComponent}&quot;,&#xd;
		&quot;otherAllowanceComponent&quot;: &quot;${otherAllowanceComponent}&quot;,&#xd;
		&quot;statutoryFoodAmt&quot;: &quot;${statutoryFoodAmt}&quot;,&#xd;
		&quot;atoFoodComponentWeekly&quot;: &quot;${atoFoodComponentWeekly}&quot;,&#xd;
		&quot;atoFoodComponent&quot;: &quot;${atoFoodComponent}&quot;,&#xd;
		&quot;isNetMethod&quot;: false,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;foodTaxableValue&quot;: &quot;${foodTaxableValue}&quot;,&#xd;
		&quot;statutoryFoodAmtWeekly&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;nonRecompenseAmt&quot;: &quot;${statutoryFoodAmtWeekly}&quot;,&#xd;
		&quot;otherAllowanceComponentTaxableValue&quot;: &quot;${otherAllowanceComponent}&quot;,&#xd;
		&quot;residentForTaxPurposes&quot;: &quot;N/A&quot;,&#xd;
		&quot;preOctDeclaration&quot;: false,&#xd;
		&quot;regionUID&quot;: &quot;c08ab253-9d2d-4ccf-a2dc-96f58680e40a&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;rfbaExcludedComponent&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;isOverrideFoodComponentSet&quot;: false,&#xd;
		&quot;isNonRecompenseAmtNull&quot;: true,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: false&#xd;
	}]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/save</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">2887</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer&#x9;http" elementType="Header">
                    <stringProp name="Header.name">Referer	http</stringProp>
                    <stringProp name="Header.value">//${BASE_URL_1}:${portnumber}/FBTWeb/dashboard/FBTWeb/dashboardOverview</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en,en-GB;q=0.8,en-AU;q=0.6,en-US;q=0.4</stringProp>
                  </elementProp>
                  <elementProp name="Origin&#x9;http" elementType="Header">
                    <stringProp name="Header.name">Origin	http</stringProp>
                    <stringProp name="Header.value">//${BASE_URL_1}:${portnumber}</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">${reportingEntityUID}</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">${year}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">${client}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lafha read" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageSize&quot;: 100,&#xd;
			&quot;pageNumber&quot;: 1&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;benefitID&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}],&#xd;
		&quot;groupBy&quot;: null,&#xd;
		&quot;filters&quot;: {&#xd;
			&quot;_apiEndpoint&quot;: &quot;/benefits/lafha&quot;&#xd;
		},&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/lafha/read</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">94896122-6d79-4bdf-b966-febc66aced8a</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer iDPAo9kl-qsxAo1-xEnHyBStrxTHIW9w6F--nuC-QIXQn4NI1bNhoNSGRLGNbZfKcMHyi5KxDLyZ_kVyso98hVR9F6CrvyIBHv0Qo8pocsBcMfMLrMrJt8HjbrfdS3-hZrEMrkSJmB5LY1l7DZSLNfKa3cFu86faLuWZWElJcn2pt0XzlQ_aESrnSPRW40RsnkcM3WZLNSpwsIUzExhSh2XCPZ1Ez9coEcpEvpCY4a6thWl5H0Ut7Lamp_3NwkPHqEcKEh9HXQvAs6USUl_IzDOVQASJqvFoHj0Hr2MoxOjzPPhNKo4nJeqaLRVLa4vGwmd4uXpRTnWZYXFkscaN8pMFDFk</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">bac0822a-ede8-4c95-8250-26d8a196b1d2</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">f483fa20-95eb-44a8-bdee-db543f1133b9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1180</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-375425448">${description}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Shanaka_Jmeter\New folder\JmeterTest\JmeterTest\Create\Lafha.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">employeeID,description,agreementDate,dateProvided,daysNotProvided,adultNumber,childrenNumber,totalAllowanceAmt,foodAllowanceAmt</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Upload" enabled="true">
            <stringProp name="IfController.condition">&quot;${uploadTest}&quot; == &quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${Url}:${portnumber}/FBTWeb/dashboard/FBTWeb/dashboardOverview</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en,en-GB;q=0.8,en-AU;q=0.6,en-US;q=0.4</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://${Url}:${portnumber}</stringProp>
                </elementProp>
                <elementProp name="x-reporting-entity-uid" elementType="Header">
                  <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                  <stringProp name="Header.value">${year}</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-period-uid" elementType="Header">
                  <stringProp name="Header.name">x-period-uid</stringProp>
                  <stringProp name="Header.value">7edccbeb-5cb6-4cc4-8fff-0f31d1a8bda3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="x-client-uid" elementType="Header">
                  <stringProp name="Header.name">x-client-uid</stringProp>
                  <stringProp name="Header.value">${client}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read the Work Paper" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/${workpaper}/read</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
vars.put(&quot;beforeTotalEntities&quot;,SearchResponse.totalEntities);

var responseCode=&quot;200&quot;;
vars.put(&quot;code&quot;,responseCode);

var beFoTotEnt=parseInt(SearchResponse.totalEntities);
	var uploadCount=parseInt(${uploadCount});

	vars.put(&quot;totalRec&quot;,beFoTotEnt+uploadCount);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="File Select Upload" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${path}\Upload\\${uploadFileName}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${path}\Upload\\${uploadFileName}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entityType</stringProp>
                    <stringProp name="Argument.value">${workpaper}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Url}</stringProp>
              <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/store</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dataImportTransactionUid</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;dataImportTransactionUid&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${fbtUrl}:${urlPort}/FBTWeb/benefits/expense?subView=upload</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="File Select Upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${path}\Upload\\${uploadFileName}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${path}\Upload\\${uploadFileName}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entityType</stringProp>
                    <stringProp name="Argument.value">${EntityWorkpaper}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/store</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dataImportTransactionUid</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;dataImportTransactionUid&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${fbtUrl}:${urlPort}/FBTWeb/benefits/expense?subView=upload</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${dataImportTransactionUid}&quot; != &quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Worksheets" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;entityType&quot;: &quot;${workpaper}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/worksheets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Worksheets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;entityType&quot;: &quot;${EntityWorkpaper}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/worksheets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Headers" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;worksheetTitle&quot;: &quot;${EntityWorkpaper}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/column-headers</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">results</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..*</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

log.info(SearchResponse.columnHeaders.length)


vars.put(&quot;columnHeaders&quot;,SearchResponse.length);
var columntable= [{key:&quot;key&quot;,value:&quot;value&quot;}];
for(var i=0;i&lt;SearchResponse.columnHeaders.length;i++)
{
	columntable[i].key=SearchResponse.columnHeaders[i].title;
	columntable[i].value=SearchResponse.columnHeaders[i].columnIndex;
	
}

log.info(columntable);
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import com.eclipsesource.json.*;


String jsonString= prev.getResponseDataAsString();
JsonObject columnHeader=JsonObject.readForm(jsonString);
JsonArray columnName = columnHeader.get(&quot;columnHeaders&quot;).asArray();
String column= columName.get(2).asObject().get(&quot;title&quot;).asSting();
log.info(column);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">columns</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">{&quot;title&quot;:&quot;(.=?)&quot;,&quot;columnIndex&quot;:&quot;(.=?)&quot;}</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Mapping" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;entityType&quot;: &quot;${EntityWorkpaper}&quot;,&#xd;
  &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/column-mappings</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;lafha&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LAFHA Process" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;file&quot;: {},&#xd;
    &quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
    	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 100,&#xd;
		&quot;title&quot;: &quot;Employee ID&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 206,&#xd;
		&quot;title&quot;: &quot;Description&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 301,&#xd;
		&quot;title&quot;: &quot;Start date of agreement&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 302,&#xd;
		&quot;title&quot;: &quot;Contract Variation Date&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 205,&#xd;
		&quot;title&quot;: &quot;Start date for FBT year&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 300,&#xd;
		&quot;title&quot;: &quot;End Date&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 304,&#xd;
		&quot;title&quot;: &quot;Period LAFHA was provided&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 305,&#xd;
		&quot;title&quot;: &quot;Days LAFHA was not provided&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 307,&#xd;
		&quot;title&quot;: &quot;Required declarations completed?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 308,&#xd;
		&quot;title&quot;: &quot;No of Adults (aged 12 or over)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 309,&#xd;
		&quot;title&quot;: &quot;No of Children (under age 12)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 16,&#xd;
		&quot;mappingId&quot;: 310,&#xd;
		&quot;title&quot;: &quot;Country&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 17,&#xd;
		&quot;mappingId&quot;: 311,&#xd;
		&quot;title&quot;: &quot;Total LAFHA Paid&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 18,&#xd;
		&quot;mappingId&quot;: 312,&#xd;
		&quot;title&quot;: &quot;Accommodation Paid (Total)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 19,&#xd;
		&quot;mappingId&quot;: 313,&#xd;
		&quot;title&quot;: &quot;Taxable Accommodation&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 20,&#xd;
		&quot;mappingId&quot;: 314,&#xd;
		&quot;title&quot;: &quot;Food Component Paid (Total)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 21,&#xd;
		&quot;mappingId&quot;: 315,&#xd;
		&quot;title&quot;: &quot;Adjusted Reasonable Food Compensation (Per Week)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 22,&#xd;
		&quot;mappingId&quot;: 316,&#xd;
		&quot;title&quot;: &quot;Net Method?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 23,&#xd;
		&quot;mappingId&quot;: 317,&#xd;
		&quot;title&quot;: &quot;Adjusted Food Component (per week)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 215,&#xd;
		&quot;title&quot;: &quot;State&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 26,&#xd;
		&quot;mappingId&quot;: 214,&#xd;
		&quot;title&quot;: &quot;Standard Category&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 24,&#xd;
		&quot;mappingId&quot;: 213,&#xd;
		&quot;title&quot;: &quot;RFBA Excluded Component&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 303,&#xd;
		&quot;title&quot;: &quot;FIFO/DIDO employee?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 212,&#xd;
		&quot;title&quot;: &quot;Reporting Entity Code&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 204,&#xd;
		&quot;title&quot;: &quot;Cost Centre Code&quot;&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;entityType&quot;: &quot;lafha&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;lafha&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="false">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                  </BSFPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                      </elementProp>
                      <elementProp name="x-reporting-entity-uid" elementType="Header">
                        <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                        <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="x-period-uid" elementType="Header">
                        <stringProp name="Header.name">x-period-uid</stringProp>
                        <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="x-client-uid" elementType="Header">
                        <stringProp name="Header.name">x-client-uid</stringProp>
                        <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;debt-waiver&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DW Process" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 400&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 401&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}],&#xd;
	&quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
	&quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
	&quot;entityType&quot;: &quot;debt-waiver&quot;,&#xd;
	&quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
	&quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;car-parking&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Car-Parking" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 5202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 5209&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 5200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 5203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 5204&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 5205&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 5201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 5208&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 16,&#xd;
		&quot;mappingId&quot;: 5207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 17,&#xd;
		&quot;mappingId&quot;: 5206&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 208&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 19,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;car-parking&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;expense&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Expense" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 703&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 210&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 702&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 701&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 704&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 700&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 16,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 209&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 208&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;expense&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;residual&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Residual" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 205&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 206&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 502&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 210&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 503&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 504&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 500&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 17,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 209&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 208&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;residual&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;property&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Property" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 205&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 206&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 602&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 210&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 603&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 604&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 600&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 17,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 209&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 208&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;property&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;adhoc&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Adhoc" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;: [{&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 201&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 216&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 203&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 1100&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 1101&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 207&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 1102&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 208&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 1103&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 214&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 200&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 202&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 215&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 204&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;adhoc&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;${worksheetName}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;vehicle/details&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Vehicle" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;file&quot;: {},&#xd;
	&quot;notificationEmailAddress&quot;: &quot;craig.mclellen@thomsonreuters.com&quot;,&#xd;
	&quot;columnHeaders&quot;:  [{&#xd;
		&quot;columnIndex&quot;: 1,&#xd;
		&quot;mappingId&quot;: 1330,&#xd;
		&quot;title&quot;: &quot;Registration Number&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 0,&#xd;
		&quot;mappingId&quot;: 206,&#xd;
		&quot;title&quot;: &quot;Description&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 4,&#xd;
		&quot;mappingId&quot;: 1332,&#xd;
		&quot;title&quot;: &quot;Shared Car?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 5,&#xd;
		&quot;mappingId&quot;: 1302,&#xd;
		&quot;title&quot;: &quot;Allocation Method&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 6,&#xd;
		&quot;mappingId&quot;: 100,&#xd;
		&quot;title&quot;: &quot;Employee ID&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 3,&#xd;
		&quot;mappingId&quot;: 215,&#xd;
		&quot;title&quot;: &quot;State&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 8,&#xd;
		&quot;mappingId&quot;: 204,&#xd;
		&quot;title&quot;: &quot;Cost Centre&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 9,&#xd;
		&quot;mappingId&quot;: 1317,&#xd;
		&quot;title&quot;: &quot;Fringe Benefit Type&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 10,&#xd;
		&quot;mappingId&quot;: 1308,&#xd;
		&quot;title&quot;: &quot;Date First Held&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 11,&#xd;
		&quot;mappingId&quot;: 1300,&#xd;
		&quot;title&quot;: &quot;Acquisition Date&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 12,&#xd;
		&quot;mappingId&quot;: 1307,&#xd;
		&quot;title&quot;: &quot;Commitment Date&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 13,&#xd;
		&quot;mappingId&quot;: 1312,&#xd;
		&quot;title&quot;: &quot;Disposal Date&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 14,&#xd;
		&quot;mappingId&quot;: 1305,&#xd;
		&quot;title&quot;: &quot;Calculation Method&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 15,&#xd;
		&quot;mappingId&quot;: 1333,&#xd;
		&quot;title&quot;: &quot;Statutory Formula Rule&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 16,&#xd;
		&quot;mappingId&quot;: 1311,&#xd;
		&quot;title&quot;: &quot;Days Unavailable for private use&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 17,&#xd;
		&quot;mappingId&quot;: 1329,&#xd;
		&quot;title&quot;: &quot;Purchase Type&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 20,&#xd;
		&quot;mappingId&quot;: 209,&#xd;
		&quot;title&quot;: &quot;Gross Up Rate&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 18,&#xd;
		&quot;mappingId&quot;: 1303,&#xd;
		&quot;title&quot;: &quot;Base Value&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 19,&#xd;
		&quot;mappingId&quot;: 1301,&#xd;
		&quot;title&quot;: &quot;Add GST?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 21,&#xd;
		&quot;mappingId&quot;: 1326,&#xd;
		&quot;title&quot;: &quot;Opening Kilometres&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 22,&#xd;
		&quot;mappingId&quot;: 1306,&#xd;
		&quot;title&quot;: &quot;Closing Kilometres&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 23,&#xd;
		&quot;mappingId&quot;: 1322,&#xd;
		&quot;title&quot;: &quot;Op Cost - Lease Charges&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 24,&#xd;
		&quot;mappingId&quot;: 1324,&#xd;
		&quot;title&quot;: &quot;Op Cost - Registration&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 25,&#xd;
		&quot;mappingId&quot;: 1321,&#xd;
		&quot;title&quot;: &quot;Op Cost - Insurance&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 26,&#xd;
		&quot;mappingId&quot;: 1320,&#xd;
		&quot;title&quot;: &quot;Op Cost - Fuel &amp; Oil&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 27,&#xd;
		&quot;mappingId&quot;: 1325,&#xd;
		&quot;title&quot;: &quot;Op Cost - Repairs &amp; Maintenance&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 28,&#xd;
		&quot;mappingId&quot;: 1323,&#xd;
		&quot;title&quot;: &quot;Op Cost - Other&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 30,&#xd;
		&quot;mappingId&quot;: 1304,&#xd;
		&quot;title&quot;: &quot;Business Use%&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 31,&#xd;
		&quot;mappingId&quot;: 1319,&#xd;
		&quot;title&quot;: &quot;Logbook Year&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 32,&#xd;
		&quot;mappingId&quot;: 1314,&#xd;
		&quot;title&quot;: &quot;Engine Capacity&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 33,&#xd;
		&quot;mappingId&quot;: 1328,&#xd;
		&quot;title&quot;: &quot;Private Kilometres&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 34,&#xd;
		&quot;mappingId&quot;: 1315,&#xd;
		&quot;title&quot;: &quot;Exempt Benefit?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 35,&#xd;
		&quot;mappingId&quot;: 1331,&#xd;
		&quot;title&quot;: &quot;RFBA Excluded?&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 2,&#xd;
		&quot;mappingId&quot;: 1316,&#xd;
		&quot;title&quot;: &quot;FBT Year&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 29,&#xd;
		&quot;mappingId&quot;: 1310,&#xd;
		&quot;title&quot;: &quot;Days Held for Use by Provider (Op Cost only)&quot;&#xd;
	}, {&#xd;
		&quot;columnIndex&quot;: 7,&#xd;
		&quot;mappingId&quot;: 212,&#xd;
		&quot;title&quot;: &quot;Reporting Entity Code&quot;&#xd;
	}],&#xd;
    &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;vehicleDetail&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;vehicleDetail&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Vehicle" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;file&quot;: { },&#xd;
    &quot;notificationEmailAddress&quot;: &quot;piyush.kumar@thomsonreuters.com&quot;,&#xd;
    &quot;columnHeaders&quot;: [&#xd;
        {&quot;columnIndex&quot;:0,&quot;mappingId&quot;:206},{&quot;columnIndex&quot;:1,&quot;mappingId&quot;:1330},{&quot;columnIndex&quot;:2,&quot;mappingId&quot;:1316},{&quot;columnIndex&quot;:3,&quot;mappingId&quot;:215},{&quot;columnIndex&quot;:4,&quot;mappingId&quot;:1332},{&quot;columnIndex&quot;:5,&quot;mappingId&quot;:1302},{&quot;columnIndex&quot;:6,&quot;mappingId&quot;:100},{&quot;columnIndex&quot;:7,&quot;mappingId&quot;:212},{&quot;columnIndex&quot;:9,&quot;mappingId&quot;:1317},{&quot;columnIndex&quot;:10,&quot;mappingId&quot;:1308},{&quot;columnIndex&quot;:11,&quot;mappingId&quot;:1300},{&quot;columnIndex&quot;:12,&quot;mappingId&quot;:1307},{&quot;columnIndex&quot;:13,&quot;mappingId&quot;:1312},{&quot;columnIndex&quot;:14,&quot;mappingId&quot;:1305},{&quot;columnIndex&quot;:15,&quot;mappingId&quot;:1333},{&quot;columnIndex&quot;:16,&quot;mappingId&quot;:1311},{&quot;columnIndex&quot;:17,&quot;mappingId&quot;:1329},{&quot;columnIndex&quot;:18,&quot;mappingId&quot;:1303},{&quot;columnIndex&quot;:19,&quot;mappingId&quot;:1301},{&quot;columnIndex&quot;:20,&quot;mappingId&quot;:209},{&quot;columnIndex&quot;:21,&quot;mappingId&quot;:1326},{&quot;columnIndex&quot;:22,&quot;mappingId&quot;:1306},{&quot;columnIndex&quot;:23,&quot;mappingId&quot;:1322},{&quot;columnIndex&quot;:24,&quot;mappingId&quot;:1324},{&quot;columnIndex&quot;:25,&quot;mappingId&quot;:1321},{&quot;columnIndex&quot;:26,&quot;mappingId&quot;:1320},{&quot;columnIndex&quot;:27,&quot;mappingId&quot;:1325},{&quot;columnIndex&quot;:28,&quot;mappingId&quot;:1323},{&quot;columnIndex&quot;:29,&quot;mappingId&quot;:1310},{&quot;columnIndex&quot;:30,&quot;mappingId&quot;:1304},{&quot;columnIndex&quot;:31,&quot;mappingId&quot;:1319},{&quot;columnIndex&quot;:32,&quot;mappingId&quot;:1314},{&quot;columnIndex&quot;:33,&quot;mappingId&quot;:1328},{&quot;columnIndex&quot;:34,&quot;mappingId&quot;:1315},{&quot;columnIndex&quot;:35,&quot;mappingId&quot;:1331},{&quot;columnIndex&quot;:36,&quot;mappingId&quot;:1313},{&quot;columnIndex&quot;:37,&quot;mappingId&quot;:214}&#xd;
    ],&#xd;
  &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;,&#xd;
    &quot;reportingUnitUid&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
    &quot;entityType&quot;: &quot;vehicleDetail&quot;,&#xd;
    &quot;worksheetTitle&quot;: &quot;vehicleDetail&quot;,&#xd;
   &#xd;
     &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/process</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var count =1;
vars.put(&quot;count&quot;,count);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Successfull Upload" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;transactionUids&quot;:[&quot;${dataImportTransactionUid}&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/FBTWebApi/DataImportTransaction/GetTransactionSummaryDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var statics=SearchResponse.transactionSummaryDetailWithLogsModels;
	totalRecords = statics.map(function(item) {
		return  item.totalRecords;
		});
	totalValidRecords = statics.map(function(item) {
		return  item.totalValidRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
			vars.put(&quot;totalValidRecords&quot;,totalValidRecords);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="397251486">&quot;totalRecords&quot;: ${uploadCount},</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var statics=SearchResponse.transactionSummaryDetailWithLogsModels;
	totalRecords = statics.map(function(item) {
			log.info(item.dataImportTransactionStatusId);
		return  item.totalRecords;
		});
	totalValidRecords = statics.map(function(item) {

			
		return  item.totalValidRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
			log.info(totalValidRecords);
		vars.put(&quot;totalValidRecords&quot;,totalValidRecords);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Upload Progress" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${uploadCount}&quot;   != &quot;${totalRecords}&quot; &amp;&amp;  ${uploadCount} != ${count},)}</stringProp>
            </WhileController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${uploadCount}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">count</stringProp>
                <stringProp name="CounterConfig.format">#</stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Upload Records" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;transactionUids&quot;:[&quot;${dataImportTransactionUid}&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/DataImportTransaction/GetTransactionSummaryDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
transactionStatusID = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
	
		return  item.dataImportTransactionStatusId;
		
		});

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		return  item.totalRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
transactionStatusID = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
	
		return  item.dataImportTransactionStatusId;
		
		});

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		return  item.totalRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(&quot;${code}&quot;   == &quot;401&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="grant_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">refresh_token</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">grant_type</stringProp>
                      </elementProp>
                      <elementProp name="refresh_token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${refreshToken}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">refresh_token</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">fbt-web-ui</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/token</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Upload Records" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;transactionUids&quot;:[&quot;${dataImportTransactionUid}&quot;]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi/DataImportTransaction/GetTransactionSummaryDetails</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);

transactionStatusID = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
	
		return  item.dataImportTransactionStatusId;
		
		});

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		return  item.totalRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}
</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                      </elementProp>
                      <elementProp name="x-reporting-entity-uid" elementType="Header">
                        <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                        <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="x-period-uid" elementType="Header">
                        <stringProp name="Header.name">x-period-uid</stringProp>
                        <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="x-client-uid" elementType="Header">
                        <stringProp name="Header.name">x-client-uid</stringProp>
                        <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);

transactionStatusID = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
	
		return  item.dataImportTransactionStatusId;
		
		});

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		return  item.totalRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(&quot;${totalValidRecords}&quot;   == &quot;${uploadCount}&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">/FBTWeb/dashboard</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="x-reporting-entity-uid" elementType="Header">
                    <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                    <stringProp name="Header.value">${LafharuId}</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="x-period-uid" elementType="Header">
                    <stringProp name="Header.name">x-period-uid</stringProp>
                    <stringProp name="Header.value">${periodUID}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="x-client-uid" elementType="Header">
                    <stringProp name="Header.name">x-client-uid</stringProp>
                    <stringProp name="Header.value">${clientUId}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-direct-api</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${totalEntitiesAfterUpload}&quot;   != &quot;${totalRec}&quot; &amp;&amp; &quot;${code}&quot;==&quot;200&quot;,)}</stringProp>
                <stringProp name="TestPlan.comments">${__javaScript(&quot;${totalRec}&quot;   != &quot;${totalRecords}&quot; &amp;&amp;  ${totalRec} != ${count},)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read the Work Paper" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${portnumber}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/${workpaper}/read</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
vars.put(&quot;beforeTotalEntities&quot;,SearchResponse.totalEntities);

var responseCode=&quot;200&quot;;
vars.put(&quot;code&quot;,responseCode);

var beFoTotEnt=parseInt(SearchResponse.totalEntities);
	var uploadCount=parseInt(${uploadCount});

	vars.put(&quot;totalRec&quot;,beFoTotEnt+uploadCount);</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Import upload record  to LAFHA" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/lafha/read</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Get benefitIDArray and totalEntities" enabled="false">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
vars.put(&quot;totalEntitiesAfterUpload&quot;,SearchResponse.totalEntities);
	var totEnt=parseInt(SearchResponse.totalEntities);
	//var beforUp=parseInt(&quot;${beforeTotalEntities}&quot;);

	
				if(totEnt==parseInt(&quot;${totalRec}&quot;))
				{
					//log.infor(totEnt);
				vars.put(&quot;count&quot;,totEnt);
				}
</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
vars.put(&quot;totalEntitiesAfterUpload&quot;,SearchResponse.totalEntities);
	var totEnt=parseInt(SearchResponse.totalEntities);
	//var beforUp=parseInt(&quot;${beforeTotalEntities}&quot;);

	
				if(totEnt==parseInt(&quot;${totalRec}&quot;))
				{
					//log.infor(totEnt);
				vars.put(&quot;count&quot;,totEnt);
				}
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(&quot;${code}&quot;   == &quot;401&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="grant_type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">refresh_token</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">grant_type</stringProp>
                        </elementProp>
                        <elementProp name="refresh_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${refreshToken}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">refresh_token</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">fbt-web-ui</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/FBTWebApi/token</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Api Access Token" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Import upload record  to LAFHA" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;parameters&quot;:&#xd;
{&quot;pageInfo&quot;:&#xd;
{&quot;pageSize&quot;:100,&#xd;
&quot;pageNumber&quot;:1},&#xd;
&quot;sortDescriptors&quot;:&#xd;
[{&quot;columnName&quot;:&quot;benefitID&quot;,&#xd;
&quot;isDescending&quot;:false}],&#xd;
&quot;groupBy&quot;:null,&#xd;
&quot;filters&quot;:&#xd;
{&quot;_apiEndpoint&quot;:&quot;/benefits/${workpaper}&quot;},&#xd;
&quot;periodUID&quot;:&quot;${year}&quot;,&quot;clientUID&quot;:&quot;${client}&quot;,&quot;reportingEntityUID&quot;:&quot;${reportingEntityUID}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/lafha/read</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Get benefitIDArray and totalEntities" enabled="false">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
vars.put(&quot;totalEntitiesAfterUpload&quot;,SearchResponse.totalEntities);
	var totEnt=parseInt(SearchResponse.totalEntities);
	//var beforUp=parseInt(&quot;${beforeTotalEntities}&quot;);

	
				if(totEnt==parseInt(&quot;${totalRec}&quot;))
				{
					//log.infor(totEnt);
				vars.put(&quot;count&quot;,totEnt);
				}
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);
vars.put(&quot;totalEntitiesAfterUpload&quot;,SearchResponse.totalEntities);
	var totEnt=parseInt(SearchResponse.totalEntities);
	//var beforUp=parseInt(&quot;${beforeTotalEntities}&quot;);

	
				if(totEnt==parseInt(&quot;${totalRec}&quot;))
				{
					//log.infor(totEnt);
				vars.put(&quot;count&quot;,totEnt);
				}
</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Import upload record  to LAFHA" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;parameters&quot;: {&#xd;
        &quot;pageInfo&quot;: {&#xd;
            &quot;pageSize&quot;: 100,&#xd;
            &quot;pageNumber&quot;: 1&#xd;
        },&#xd;
        &quot;sortDescriptors&quot;: [&#xd;
            {&#xd;
                &quot;columnName&quot;: &quot;benefitID&quot;,&#xd;
                &quot;isDescending&quot;: false&#xd;
            }&#xd;
        ],&#xd;
        &quot;period&quot;: &quot;${periodUID}&quot;,&#xd;
        &quot;client&quot;: &quot;${clientUId}&quot;,&#xd;
        &quot;reportingEntity&quot;: &quot;${LafharuId}&quot;&#xd;
    }&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/FBTWebApi//benefits/lafha/read</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Get benefitIDArray and totalEntities" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
var code = prev.getResponseCode(); 
vars.put(&quot;code&quot;,code);

vars.put(&quot;totalEntitiesAfterUpload&quot;,SearchResponse.totalEntities);
	var totEnt=parseInt(SearchResponse.totalEntities);
	//var beforUp=parseInt(&quot;${beforeTotalEntities}&quot;);

	//var totRec=&quot;${totalRec}&quot;;
	
				if(totEnt==parseInt(&quot;${totalRec}&quot;))
				{
					//log.infor(totEnt);
				vars.put(&quot;count&quot;,totEnt);
				}
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${totalRec}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">count</stringProp>
                  <stringProp name="CounterConfig.format">#</stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                </CounterConfig>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">&quot;${dataImportTransactionUid}&quot; != &quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LAFHA Worksheets" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;entityType&quot;: &quot;${workpaper}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/worksheets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LAFHA Headers" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;worksheetTitle&quot;: &quot;${workpaper}&quot;,&#xd;
    &quot;dataImportTransactionUid&quot;: &quot;${dataImportTransactionUid}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/column-headers</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LAFHA Mapping" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;entityType&quot;: &quot;${workpaper}&quot;,&#xd;
  &quot;periodUid&quot;: &quot;${year}&quot;,&#xd;
    &quot;clientUid&quot;: &quot;${client}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/UploadFile/column-mappings</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">6cad2000-aefd-463c-af85-486555bb608c</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">c445e38f-b4cb-429e-81be-255fa26dd5e1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">c66c7629-11f1-4b62-a579-bc5eea54787c</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Upload Records For  LAFHA" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;transactionUids&quot;:[&quot;${dataImportTransactionUid}&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/FBTWebApi/DataImportTransaction/GetTransactionSummaryDetails</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

transactionStatusID = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
	
		return  item.dataImportTransactionStatusId;
		
		});

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		return  item.totalRecords;
		});
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

	totalRecords = SearchResponse.transactionSummaryDetailWithLogsModels.map(function(item) {
		
		return  item.dataImportTransactionStatusId;
		});
		
			vars.put(&quot;totalRecords&quot;,totalRecords);
	
				if(totalRecords==&quot;${uploadCount}&quot;)
				{
				vars.put(&quot;count&quot;,totalRecords);
				}
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}/FBTWeb/benefits/lafha/workpaper</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB,en-US;q=0.8,en;q=0.6</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">http://mel-tlrbld-p29:${portnumber}</stringProp>
                    </elementProp>
                    <elementProp name="x-reporting-entity-uid" elementType="Header">
                      <stringProp name="Header.name">x-reporting-entity-uid</stringProp>
                      <stringProp name="Header.value">${debtWaiverRuId}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="x-period-uid" elementType="Header">
                      <stringProp name="Header.name">x-period-uid</stringProp>
                      <stringProp name="Header.value">${periodUID}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="x-client-uid" elementType="Header">
                      <stringProp name="Header.name">x-client-uid</stringProp>
                      <stringProp name="Header.value">${clientUId}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Upload LAFHA" enabled="false">
              <stringProp name="IfController.condition">&quot;${uploadCount}&quot; !=&quot;&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DebtWaiver Selection" enabled="true">
          <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;debt-waiver&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${create}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;selectOptionCriteria&quot;: &quot;${employeeID}&quot;,&#xd;
&#xd;
		&quot;benefitClassName&quot;: &quot;&quot;,&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageNumber&quot;: 1,&#xd;
			&quot;pageSize&quot;: 10&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;lastName&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi/admin/employees/select</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                <stringProp name="VAR">personUID</stringProp>
                <stringProp name="JSONPATH">$..entityUid</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">personUID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..entityUid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;personUID&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: null,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;dateProvided&quot;: &quot;2018-03-31T00:00:00&quot;,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;firstValidation&quot;: true&#xd;
		&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="validate description" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;description&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;49c15c35-a366-435d-9658-5a5422053516&quot;,&#xd;
		&quot;standardCategoryID&quot;: 388,&#xd;
		&quot;dateProvided&quot;: &quot;2018-03-31T00:00:00&quot;,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;firstValidation&quot;: false&#xd;
&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var currentdate = new Date();
var str=&quot;${description}&quot;;
var client=&quot;${FirmId}&quot;;
    var datetime =str +&quot; &quot;+client+&quot; Last Sync: &quot; + currentdate.getDate() + &quot;/&quot;+(currentdate.getMonth()+1) + &quot;/&quot; + currentdate.getFullYear()+ &quot; @ &quot;  + currentdate.getHours() + &quot;:&quot;  + currentdate.getMinutes() + &quot;:&quot; + currentdate.getSeconds()+ &quot;:&quot; + currentdate.getMilliseconds();

  vars.put(&quot;description&quot;,datetime);
 </stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Dateprovider" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;dateProvided&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;49c15c35-a366-435d-9658-5a5422053516&quot;,&#xd;
		&quot;standardCategoryID&quot;: 388,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;firstValidation&quot;: false&#xd;
&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Amount Validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;amount&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;amount&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;49c15c35-a366-435d-9658-5a5422053516&quot;,&#xd;
		&quot;standardCategoryID&quot;: 388,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;firstValidation&quot;: false&#xd;
&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: null,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;amount&quot;]&#xd;
	},&#xd;
	&quot;records&quot;:[ {&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;49c15c35-a366-435d-9658-5a5422053516&quot;,&#xd;
		&quot;standardCategoryID&quot;: 388,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;4b921498-c119-4919-b8aa-a0e105ae961f&quot;,&#xd;
		&quot;firstValidation&quot;: false&#xd;
&#xd;
	}]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/save</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Debt-waiver read" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageSize&quot;: 100,&#xd;
			&quot;pageNumber&quot;: 1&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;benefitID&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}],&#xd;
		&quot;groupBy&quot;: null,&#xd;
		&quot;filters&quot;: {&#xd;
			&quot;_apiEndpoint&quot;: &quot;/benefits/debt-waiver&quot;&#xd;
		},&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/debt-waiver/read</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Shanaka_Jmeter\New folder\JmeterTest\JmeterTest\Create\debtWaiverCreate.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">employeeID,description,dateProvided,amount</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Expense" enabled="true">
          <stringProp name="IfController.condition">&quot;${workpaper}&quot;==&quot;expense&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${create}&quot;==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;selectOptionCriteria&quot;: &quot;${employeeID}&quot;,&#xd;
&#xd;
		&quot;benefitClassName&quot;: &quot;&quot;,&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageNumber&quot;: 1,&#xd;
			&quot;pageSize&quot;: 10&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;lastName&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi/admin/employees/select</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                <stringProp name="VAR">personUID</stringProp>
                <stringProp name="JSONPATH">$..entityUid</stringProp>
                <stringProp name="DEFAULT">0</stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">personUID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..entityUid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employee validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;personUID&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: null,&#xd;
		&quot;dateProvided&quot;: &quot;2018-03-31T00:00:00&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: 0,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: 0,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Description validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;description&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;2018-03-31T00:00:00&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: 0,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: 0,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportUnitUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Date Provider validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;dateProvided&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: 0,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: 0,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="actualCostOfBenefit validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;actualCostOfBenefit&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;actualCostOfBenefit&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: &quot;${actualCostOfBenefit}&quot;,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: 0,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: 0,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">amountGSTIncluded</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..amountGSTIncluded.value</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Amount validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;amount&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;actualCostOfBenefit&quot;, &quot;amount&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;:0,&#xd;
		&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: &quot;${actualCostOfBenefit}&quot;,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
	&quot;amountGSTIncluded&quot;:&quot;${amountGSTIncluded}&quot;,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
	&#xd;
		&quot;businessPercent&quot;: 0,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="businessAmount validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
	&quot;fieldName&quot;: &quot;businessPercent&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;actualCostOfBenefit&quot;, &quot;amount&quot;, &quot;businessPercent&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: &quot;${actualCostOfBenefit}&quot;,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;:&quot;${amountGSTIncluded}&quot;,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: &quot;${businessPercent}&quot;,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: 0,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="employeeContributionEntered Validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;employeeContributionEntered&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;actualCostOfBenefit&quot;, &quot;amount&quot;, &quot;businessPercent&quot;, &quot;employeeContributionEntered&quot;]&#xd;
	},&#xd;
	&quot;record&quot;: {&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;amountGSTIncluded&quot;:&quot;${amountGSTIncluded}&quot;,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: &quot;${actualCostOfBenefit}&quot;,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: &quot;${businessPercent}&quot;,&#xd;
		&quot;businessAmount&quot;: 0,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: &quot;${employeeContributionEntered}&quot;,&#xd;
		&quot;employeeContribution&quot;: 0,&#xd;
		&quot;excessEmployeeContribution&quot;: 0,&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
		&quot;reductionAmount&quot;: 0,&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;fieldName&quot;: &quot;employeeContributionEntered&quot;,&#xd;
		&quot;dirtyFields&quot;: [&quot;personUID&quot;, &quot;description&quot;, &quot;dateProvided&quot;, &quot;actualCostOfBenefit&quot;, &quot;amount&quot;, &quot;businessPercent&quot;, &quot;employeeContributionEntered&quot;]&#xd;
	},&#xd;
	&quot;records&quot;: [{&#xd;
		&quot;benefitID&quot;: null,&#xd;
		&quot;personUID&quot;: &quot;${personUID}&quot;,&#xd;
		&quot;costCenterUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;regionUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;description&quot;: &quot;${description}&quot;,&#xd;
		&quot;dateProvided&quot;: &quot;${dateProvided}&quot;,&#xd;
		&quot;inHouse&quot;: false,&#xd;
		&quot;inHouseCalcMethodCode&quot;: 0,&#xd;
		&quot;groupTypeUID&quot;: &quot;73ed6487-6f67-4d3b-9fd5-0973e4e8356d&quot;,&#xd;
		&quot;actualCostOfBenefit&quot;: &quot;${actualCostOfBenefit}&quot;,&#xd;
		&quot;isAddGSTRequired&quot;: false,&#xd;
		&quot;amountGSTIncluded&quot;: 0,&#xd;
		&quot;amount&quot;: &quot;${amount}&quot;,&#xd;
		&quot;notionalEmployeeContribution&quot;: 0,&#xd;
		&quot;businessPercent&quot;: &quot;${businessPercent}&quot;,&#xd;
	&quot;amountGSTIncluded&quot;:&quot;${amountGSTIncluded}&quot;,&#xd;
		&quot;exemptBenefits&quot;: false,&#xd;
		&quot;isRFBAExcluded&quot;: false,&#xd;
		&quot;employeeContributionEntered&quot;: &quot;${employeeContributionEntered}&quot;,&#xd;
		&#xd;
		&quot;inHouseAmtApplied&quot;: 0,&#xd;
		&quot;valueOfReductions&quot;: 0,&#xd;
		&quot;taxableAmount&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmount&quot;: 0,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;,&#xd;
		&quot;reportableAmount&quot;: 0,&#xd;
		&quot;taxPayable&quot;: 0,&#xd;
		&quot;benefitTypeUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;benefitValueUID&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
		&quot;concessionAmount&quot;: 0,&#xd;
		&quot;exemptGUTA17000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt17000&quot;: 0,&#xd;
		&quot;taxPayable17000&quot;: 0,&#xd;
		&quot;exemptGUTA30000Applied&quot;: 0,&#xd;
		&quot;grossedUpTaxableAmt30000&quot;: 0,&#xd;
		&quot;taxPayable30000&quot;: 0,&#xd;
		&quot;gstPercent&quot;: 10,&#xd;
		&quot;rebateApplied&quot;: 0,&#xd;
		&quot;unCappedRFBA&quot;: 0,&#xd;
		&quot;taxPayableRebate&quot;: 0,&#xd;
		&quot;standardCategoryID&quot;: 0,&#xd;
		&quot;grossTaxableAmount&quot;: 0,&#xd;
	&#xd;
		&quot;benefitAmount&quot;: 0,&#xd;
		&quot;firstValidation&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/save</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expense read" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageSize&quot;: 100,&#xd;
			&quot;pageNumber&quot;: 1&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;benefitID&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}],&#xd;
		&quot;groupBy&quot;: null,&#xd;
		&quot;filters&quot;: {&#xd;
			&quot;_apiEndpoint&quot;: &quot;/benefits/expense&quot;&#xd;
		},&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">82</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FBTWebApi//benefits/expense/read</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://fbtapp-uat.onesourcetax.com:82/FBTWeb/benefits/expense/workpaper</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">6559</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">C:\Shanaka_Jmeter\New folder\JmeterTest\JmeterTest\Create\expenseCreate.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">employeeID, description, dateProvided, actualCostOfBenefit,amount, businessPercent, employeeContributionEntered</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete All" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete All" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">FBTWebApi//benefits/${workpaper}/deleteAll</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AfterDelete read" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;: {&#xd;
		&quot;pageInfo&quot;: {&#xd;
			&quot;pageSize&quot;: 100,&#xd;
			&quot;pageNumber&quot;: 1&#xd;
		},&#xd;
		&quot;sortDescriptors&quot;: [{&#xd;
			&quot;columnName&quot;: &quot;benefitID&quot;,&#xd;
			&quot;isDescending&quot;: false&#xd;
		}],&#xd;
		&quot;groupBy&quot;: null,&#xd;
		&quot;filters&quot;: {&#xd;
			&quot;_apiEndpoint&quot;: &quot;/benefits/lafha&quot;&#xd;
		},&#xd;
		&quot;periodUID&quot;: &quot;${year}&quot;,&#xd;
		&quot;clientUID&quot;: &quot;${client}&quot;,&#xd;
		&quot;reportingEntityUID&quot;: &quot;${reportingEntityUID}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">82</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">FBTWebApi//benefits/${workpaper}/read</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="-713398365">
              <stringProp name="-1949735864">172.31.145.31</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1474975940">
              <stringProp name="-1949735864">172.31.145.31</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-825738381">
              <stringProp name="-1949735864">172.31.145.31</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1063270870">
              <stringProp name="-1949735864">172.31.145.31</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
